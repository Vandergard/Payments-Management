///**
// * NOTE: This class is auto generated by the swagger code generator program (unset).
// * https://github.com/swagger-api/swagger-codegen
// * Do not edit the class manually.
// */
//package io.swagger.api;
//
//import org.threeten.bp.OffsetDateTime;
//import io.swagger.model.RefundRequestType;
//import io.swagger.model.RefundType;
//import io.swagger.annotations.*;
//import org.springframework.http.ResponseEntity;
//import org.springframework.validation.annotation.Validated;
//import org.springframework.web.bind.annotation.PathVariable;
//import org.springframework.web.bind.annotation.RequestBody;
//import org.springframework.web.bind.annotation.RequestHeader;
//import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RequestMethod;
//import org.springframework.web.bind.annotation.RequestParam;
//import org.springframework.web.bind.annotation.RequestPart;
//import org.springframework.web.multipart.MultipartFile;
//
//import javax.validation.Valid;
//import javax.validation.constraints.*;
//import java.util.List;
//@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-12-22T13:14:44.496+03:00")
//
//@Api(value = "refund", description = "the refund API")
//public interface RefundApi {
//
//    @ApiOperation(value = "Create a new refund", nickname = "createRefund", notes = "", tags={ "refunds", })
//    @ApiResponses(value = {
//        @ApiResponse(code = 201, message = "Refund created successfully") })
//    @RequestMapping(value = "/refund",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.POST)
//    ResponseEntity<Void> createRefund(@ApiParam(value = "Data necessary to request a refund" ,required=true )  @Valid @RequestBody RefundRequestType refundRequest);
//
//
//    @ApiOperation(value = "Retrieve a refund", nickname = "retrieveRefund", notes = "", response = RefundType.class, tags={ "refunds", })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "Refund retrieved successfully", response = RefundType.class) })
//    @RequestMapping(value = "/refund/{refundId}",
//        produces = { "application/json" },
//        method = RequestMethod.GET)
//    ResponseEntity<RefundType> retrieveRefund(@ApiParam(value = "ID of the refund that needs to be fetched",required=true) @PathVariable("refundId") String refundId);
//
//
//    @ApiOperation(value = "Retrieve a list of refunds", nickname = "retrieveRefunds", notes = "", response = RefundType.class, responseContainer = "List", tags={ "refunds", })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "Refunds retrieved successfully", response = RefundType.class, responseContainer = "List") })
//    @RequestMapping(value = "/refund",
//        produces = { "application/json" },
//        method = RequestMethod.GET)
//    ResponseEntity<List<RefundType>> retrieveRefunds(@ApiParam(value = "To retrieve the refunds from a specific customer") @Valid @RequestParam(value = "customerId", required = false) String customerId,@ApiParam(value = "To retrieve the refunds from a specific account") @Valid @RequestParam(value = "accountId", required = false) String accountId,@ApiParam(value = "To retrieve the refunds performed with a specific method", allowableValues = "directToBill, eMoney, bankAccount, debitCard, creditCard, prepaidCard") @Valid @RequestParam(value = "paymentMethod_type", required = false) String paymentMethodType,@ApiParam(value = "To retrieve the refunds with a specific reference code") @Valid @RequestParam(value = "referenceCode", required = false) String referenceCode,@ApiParam(value = "To retrieve the refunds performed after this date") @Valid @RequestParam(value = "startDate", required = false) OffsetDateTime startDate,@ApiParam(value = "To retrieve the refunds performed before this date") @Valid @RequestParam(value = "endDate", required = false) OffsetDateTime endDate,@ApiParam(value = "") @Valid @RequestParam(value = "limit", required = false) Integer limit,@ApiParam(value = "") @Valid @RequestParam(value = "offset", required = false) Integer offset);
//
//}
